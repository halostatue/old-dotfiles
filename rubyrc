#!/usr/bin/env ruby
# Shared code for irbrc/pryrc.

module RubyRC
  extend self

  # Pre-defined hash and array to experiment with.
  # http://stackoverflow.com/questions/123494/whats-your-favourite-irb-trick/123847#123847
  HASH = { :one => 1, :two => 2, :three => 3, :four => 4, :five => 5 } unless defined?(HASH)
  ARRAY = %w[one two three four five] unless defined?(ARRAY)

  # E.g.:
  # 12:23:15 >> 
  # DEV 12:23:15 >> 
  PROMPT = proc { |x|
    "#{[ (rails_console? ? Rails.env.first(3).upcase : nil), Time.now.strftime("%H:%M:%S") ].compact.join(' ')} #{x} "
  } unless defined?(PROMPT)

  # Quick benchmarking
  # http://stackoverflow.com/questions/123494/whats-your-favourite-irb-trick/123834#123834
  def bench(repetitions=100, &block)
    require 'benchmark'

    Benchmark.bmbm do |b|
      b.report {repetitions.times &block}
    end
    nil
  end

  def rails_console?
    ($0 == 'irb' && ENV['RAILS_ENV']) || # Rails 2.
      $0 == 'script/rails'  # Rails 3.
  end

  def rails?
    (defined?(Rails) && Rails.env)
  end
end

# Require ftools in Ruby 1.8.
begin
  require "ftools"
rescue LoadError
end

# Load .railsrc for Rails.
load File.dirname(__FILE__) + '/.railsrc' if RubyRC.rails_console?

# Toys methods
# See https://gist.github.com/807492
class Array
  def self.toy(n = 10, &block)
    if block_given?
      Array.new(n, &block)
    else
      Array.new(n) { |i| i + 1 }
    end
  end
end

class Hash
  def self.toy(n = 10)
    Hash[Array.toy(n).zip(Array.toy(n) { |c| (96 + (c + 1)).chr })]
  end
end

def yore
  yield
rescue Exception => ex
  ex
end

class Object
  # Generate the class inheritance tree, in ASCII.
  def classtree(root = self.class, options = {})
    if RUBY_PLATFORM =~ /win32|mingw/
      colourise  = options[:colourise]    || false
    else
      colourise  = options[:colourise]    || true
    end
    output       = options[:output]       || $stdout

    # get children of root
    children = {}
    maxlength = root.to_s.length
    ObjectSpace.each_object(Class) do |klass|
      if (root != klass && klass.ancestors.include?(root))
        (children[klass.superclass] ||= []) << klass
        maxlength = klass.to_s.length if klass.to_s.length > maxlength
      end
    end
    maxlength += 3

    # print nice ascii class inheritance tree
    indentation = " " * 4
    (c = {}).default = ""
    if colourise
      c[:lines]       = "\033[34;1m"
      c[:dots]        = "\033[31;1m"
      c[:class_names]  = "\033[33;1m"
      c[:module_names] = "\033[32;1m"
      c[:method_names] = "\033[39;m"
    end

    rprint = proc do |current_root, prefix|
      ind_s = maxlength - current_root.to_s.length
      if options[:show_methods] # show methods (but don't show mixed in modules)
        output.puts prefix.tr('`', '|')
        #     methods = (current_root.instance_methods - (begin current_root.superclass.instance_methods; rescue NameError; []; end))
        methods = current_root.instance_methods(false).sort
        strings = methods.collect do |m|
          if children[current_root].nil?
            s = " " * maxlength
          else
            ind = " " * (maxlength - indentation.length - 1)
            s = "#{c[:lines]}#{indentation}|#{ind}"
          end

        "#{prefix.tr('`', ' ')}#{s}#{c[:dots]}:.. #{c[:method_names]}#{m.to_s}"
        end

        strings[0] = "#{prefix}#{c[:lines]}- #{c[:class_names]}#{current_root.to_s} #{c[:dots]}"
        if not methods[0].nil?
          ind = '.' * ind_s
          strings[0] << "#{ind} #{c[:method_names]}#{methods[0]}"
        end

        strings.each {|s| output.puts(s) }
      else
        s = "#{prefix}#{c[:lines]}- #{c[:class_names]}#{current_root.to_s}"
        if not options[:no_modules]
          modules = current_root.included_modules - [Kernel]
          if modules.size > 0
            ind = ' ' * ind_s
            s << "#{ind}#{c[:lines]}[ #{c[:module_names]}"
            s << modules.join("#{c[:lines]}, #{c[:module_names]}")
            s << "#{c[:lines]} ]"
          end
        end
        output.puts(s)
      end
      if not children[current_root].nil?
        children[current_root].sort! {|a, b| a.to_s <=> b.to_s}
        children[current_root].each do |child|
          s = (child == children[current_root].last) ? '`' : '|'
          rprint[child, "#{prefix.tr('`', ' ')}#{indentation}#{c[:lines]}#{s}"]
        end
      end
    end

    rprint.call(root, "")
    nil
  end

  # Generate the class inheritance tree, in ASCII, 
  def classtree_methods(root = self.class, options = {})
    classtree(root, options.merge({:show_methods => true}))
  end

  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    system 'ri', method.to_s
  end
end

