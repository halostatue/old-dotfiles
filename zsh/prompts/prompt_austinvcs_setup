#autoload -U
# austin-vcs prompt theme

if not is-at-least 4.3.9; then
  prompt austin "${@}"
  return ${?}
fi

autoload -Uz vcs_info
autoload zgitinit && zgitinit
autoload colors && colors

function prompt_austin-vcs_help()
{
  cat <<'EOF'
  prompt austin-vcs [options] [theme THEME]

  Boolean Options
  ---------------
  These options can be disabled by prepending with 'no' or 'no_', e.g.,
  'no_verbose' or 'notitlebar'.

    titlebar      If the selected theme has a titlebar prompt, this
                  enables or disables the titlebar prompt. Defaults to
                  'on'.
    right         If the selected theme has a right-side prompt, this
                  enables or disables the right-side prompt. Defaults to
                  'off'.
    verbose       If the selected theme has a difference between a verbose
                  and non-verbose format, this enables or disables the
                  verbose format. For the default theme, verbose matters
                  only for the 'right' prompt. Defaults to 'on' unless
                  using screen.

  Themes
  ------
  Should only be specified once. Provides more flexible customization of
  the theming process without requiring a full reimplementation of the
  VCS theme. The keyword 'theme' is required.
EOF
}

function APVCS-default-colors()
{
  typeset -gA apvcs_theme_colors
  apvcs_theme_colors[default]='default'
  apvcs_theme_colors[date]='cyan'
  apvcs_theme_colors[time]='blue'
  apvcs_theme_colors[host]='green'
  apvcs_theme_colors[user]='cyan'
  apvcs_theme_colors[punc]='yellow'
  apvcs_theme_colors[line]='magenta'
  apvcs_theme_colors[history]='green'
  apvcs_theme_colors[path]='cyan'
  apvcs_theme_colors[shortpath]='default'
  apvcs_theme_colors[rc]='red'
  apvcs_theme_colors[scm_branch]='cyan'
  apvcs_theme_colors[scm_action]='green'
  apvcs_theme_colors[scm_commit_id]='yellow'
  apvcs_theme_colors[scm_status_dirty]='red'
  apvcs_theme_colors[scm_status_staged]='green'
  apvcs_theme_colors[#]='yellow'
}

function APVCS-default-strings()
{
  typeset -gA apvcs_theme_strings
  apvcs_theme_strings[date]="${APVCS_fg[date]}%D{%Y-%m-%d} ${APVCS_fg[time]}%D{%T}${APVCS_fg[reset]}"
  apvcs_theme_strings[line]="${APVCS_fg[line]}%l${APVCS_fg[reset]}"
  apvcs_theme_strings[unstaged]='!'
  apvcs_theme_strings[staged]='+'
}

function austin-vcs-theme-default()
{
  APVCS-default-colors
  APVCS-activate-colors
  APVCS-default-strings
}

function austin-vcs-theme-bart()
{
  APVCS-default-colors

  apvcs_theme_colors[scm_branch]='green'
  apvcs_theme_colors[scm_action]='cyan'
  apvcs_theme_colors[path]='yellow'

  APVCS-activate-colors

  APVCS-default-strings

  local _branch _action _path
  _branch='${APVCS_fg[scm_branch]}%b%u%c${APVCS_fg[reset]}' # e.g. master¹²
  _action='(${APVCS_fg[scm_action]}%a${APVCS_fg[reset]}%)'   # e.g. (rebase-i)
  _path='%R${APVCS_fg[path]}}/%S' # e.g. ~/repo/subdir

  # display ¹ if there are unstaged changes
  apvcs_theme_strings[unstaged]='¹'
  # display ² if there are staged changes
  apvcs_theme_strings[staged]='²'
  apvcs_theme_strings[actionformats]=("${_branch}${_action}//" "${_path}")
  apvcs_theme_strings[formats]=("${_branch}//" "${_path}")
  apvcs_theme_strings[nvcsformats]=("" "%~")
}

function APVCS-activate-colors()
{
  local -A _colors
  _colors=(${(kv)apvcs_theme_colors[@]})

  typeset -gA APVCS_fg
  APVCS_fg=(${(kv)_colors})
  APVCS_fg[reset]="%b%s%u%f%k"

  for mode in ${(k)_colors}; do
    local color_name="${(L)_colors[${mode}]}"
    local color_value="${APVCS_fg[reset]}"

    while true; do
      case "${color_name}" in
        bold-*|bright-*)
          color_value="${color_value}%B"
          color_name="${color_name##bold-}"
          color_name="${color_name##bright-}"
          ;;
        standout-*)
          color_value="${color_value}%S"
          color_name="${color_name##standout-}"
          ;;
        underline-*)
          color_value="${color_value}%U"
          color_name="${color_name##underline-}"
          ;;
        *)
          break
          ;;
      esac
    done

    color_value="${color_value}%F{${color_name}}"
    APVCS_fg[${mode}]="${color_value}"
  done
}

function revstring()
{
  git describe --tags --always ${1} 2>/dev/null ||
  git rev-parse --short ${1} 2>/dev/null
}

function prompt_austin-vcs_setup()
{
  local -A options

  options[titlebar]=true
  options[right]=false
  options[theme]=default
  options[verbose]=true

  if [[ ${TERM} == screen* ]] && [ -n "${STY}" ]; then
    options[verbose]=false
  fi

  local -i is_theme=0

  for arg in "$@"; do
    if [ ${is_theme} -eq 1 ]; then
      options[theme]=${arg}
      is_theme=0
    else
      case ${arg} in
        no*)
          options[${arg/no/}]=false
          ;;
        no_*)
          options[${arg/no_/}]=false
          ;;
        theme)
          is_theme=1
          ;;
        *)
          options[${arg}]=true
          ;;
      esac
    fi
  done

  if [ ${is_theme} -eq 1 ]; then
    options[theme]=default
  fi

  for opt in ${(k)options}; do
    [ "${opt}" = "theme" ] && continue
    [[ ${options[${opt}]} == true ]] && options[${opt}]=1 || options[${opt}]=
  done

  austin-vcs-theme-${options[theme]}

  local p_date p_line p_rc

  p_date="${APVCS_fg[date]}%D{%Y-%m-%d} ${APVCS_fg[time]}%D{%T}${APVCS_fg[reset]}"
  p_line="${APVCS_fg[line]}%l${APVCS_fg[reset]}"

  PROMPT=

  if [ ${options[titlebar]} ]; then
    PR_TITLEBAR=
    PR_STITLE=

    # Decide if we need to set titlebar text.
    # Decide whether to set a screen title
    case ${TERM} in
      xterm*|ansi)
        PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
        ;;
      screen)
        PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
        PR_STITLE=$'%{\ekzsh\e\\%}'
        ;;
    esac

    PROMPT="${PR_STITLE}"
    PROMPT+="${(e)PR_TITLEBAR}"
  fi

  if [ ${options[verbose]} ]; then
    PROMPT+="${APVCS_fg[host]}%m${APVCS_fg[reset]} "
  fi
  PROMPT+="${APVCS_fg[path]}%(2~.%~.%/)${APVCS_fg[reset]}"
  PROMPT+="\$(prompt_austin-vcs_scm_status)"
  PROMPT+="%(?.. ${APVCS_fg[rc]}(%?%)${APVCS_fg[reset]})"

  PROMPT+="
"
  PROMPT+="${APVCS_fg[history]}%h${APVCS_fg[reset]} "
  PROMPT+="${APVCS_fg[shortpath]}%1~${APVCS_fg[reset]}"
  PROMPT+="\$(prompt_austin-vcs_scm_branch)"
  PROMPT+=" ${APVCS_fg[#]}%#${APVCS_fg[reset]} "

  RPROMPT=
  if [ ${options[right]} ]; then
    if [ ${options[verbose]} ]; then
      RPROMPT+="${p_date} "
    fi
    RPROMPT+="${APVCS_fg[user]}%n${APVCS_fg[reset]}"
    RPROMPT+=" ${p_line}"
  else
    unset RPROMPT
  fi

  export PROMPT RPROMPT
  if is-at-least 4.3.9; then
    add-zsh-hook precmd prompt_austin-vcs_precmd
    # add-zsh-hook preexec prompt_austin-vcs_preexec
  else
    # preexec_functions+=(prompt_austin-vcs_preexec)
    precmd_functions+=(prompt_austin-vcs_precmd)
  fi
}

prompt_austin-vcs_preexec() {
  if [[ "${TERM}" == "screen" ]]; then
    local CMD=${1[(wr)^(*=*|sudo|-*)]}
    echo -n "\ek${CMD}\e\\"
  fi
}

prompt_austin-vcs_precmd() {
  local ex=$?
  psvar=()

  if [[ ${ex} -ge 128 ]]; then
    sig=${signals[${ex}-127]}
    psvar[1]="sig${(L)sig}"
  else
    psvar[1]="${ex}"
  fi

  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  # Truncate the path if it's too long.
  PR_FILLBAR=""
  PR_PWDLEN=""

  local promptsize=${#${(%):---(%n@%m:%l)---()--}}
  local pwdsize=${#${(%):-%~}}

  if [[ "${promptsize} + ${pwdsize}" -gt ${TERMWIDTH} ]]; then
    ((PR_PWDLEN=${TERMWIDTH} - ${promptsize}))
  else
    PR_FILLBAR="\${(l.((${TERMWIDTH} - (${promptsize} + ${pwdsize})))..${PR_HBAR}.)}"
  fi
}

prompt_austin-vcs_scm_status() {
  zgit_isgit || return

  head=$(zgit_head)
  gitcommit=$(revstring ${head})

  local -a commits

  if zgit_rebaseinfo; then
    orig_commit=$(revstring ${zgit_info[rb_head]})
    orig_name=$(git name-rev --name-only ${zgit_info[rb_head]})
    orig="${APVCS_fg[scm_branch]}${orig_name}${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${orig_commit}${APVCS_fg[punc]})"
    onto_commit=$(revstring ${zgit_info[rb_onto]})
    onto_name=$(git name-rev --name-only ${zgit_info[rb_onto]})
    onto="${APVCS_fg[scm_branch]}${onto_name}${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${onto_commit}${APVCS_fg[punc]})"

    if [ -n "${zgit_info[rb_upstream]}" ] && [ ${zgit_info[rb_upstream]} != ${zgit_info[rb_onto]} ]; then
      upstream_commit=$(revstring ${zgit_info[rb_upstream]})
      upstream_name=$(git name-rev --name-only ${zgit_info[rb_upstream]})
      upstream="${APVCS_fg[scm_branch]}${upstream_name}${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${upstream_commit}${APVCS_fg[punc]})"
      commits+="rebasing ${upstream}${APVCS_fg[reset]}..${orig}${APVCS_fg[reset]} onto ${onto}${APVCS_fg[reset]}"
    else
      commits+="rebasing ${onto}${APVCS_fg[reset]}..${orig}${APVCS_fg[reset]}"
    fi

    local -a revs
    revs=($(git rev-list ${zgit_info[rb_onto]}..HEAD))
    if [ $#revs -gt 0 ]; then
      commits+="\n$#revs commits in"
    fi

    if [ -f ${zgit_info[dotest]}/message ]; then
      mess=$(head -n1 ${zgit_info[dotest]}/message)
      commits+="on ${mess}"
    fi
  elif [ -n "${gitcommit}" ]; then
    commits+="on ${APVCS_fg[scm_branch]}${head}${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${gitcommit}${APVCS_fg[punc]})${APVCS_fg[reset]}"
    local track_merge=$(zgit_tracking_merge)
    if [ -n "${track_merge}" ]; then
      if git rev-parse --verify -q ${track_merge} >/dev/null; then
        local track_remote=$(zgit_tracking_remote)
        local tracked=$(revstring ${track_merge} 2>/dev/null)

        local -a revs
        revs=($(git rev-list --reverse ${track_merge}..HEAD))
        if [ $#revs -gt 0 ]; then
          local base=$(revstring ${revs[1]}~1)
          local base_name=$(git name-rev --name-only ${base})
          local base_short=$(revstring ${base})
          local word_commits
          if [ $#revs -gt 1 ]; then
            word_commits='commits'
          else
            word_commits='commit'
          fi

          local conj="since"
          if [[ "${base}" == "${tracked}" ]]; then
            conj+=" tracked"
            tracked=
          fi
          commits+="$#revs ${word_commits} ${conj} ${APVCS_fg[scm_branch]}${base_name}${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${base_short}${APVCS_fg[punc]})${APVCS_fg[reset]}"
        fi

        if [ -n "${tracked}" ]; then
          local track_name=${track_merge}
          if [[ ${track_remote} == "." ]]; then
            track_name=${track_name##*/}
          fi
          tracked=$(revstring ${tracked})
          commits+="tracking ${APVCS_fg[scm_branch]}${track_name}${APVCS_fg[punc]}"
          if [[ "${tracked}" != "${gitcommit}" ]]; then
            commits[$#commits]+="(${APVCS_fg[scm_commit_id]}${tracked}${APVCS_fg[punc]})"
          fi
          commits[$#commits]+="${APVCS_fg[reset]}"
        fi
      fi
    fi
  fi

  gitsvn=$(git rev-parse --verify -q --short git-svn)
  if [ $? -eq 0 ]; then
    gitsvnrev=$(zgit_svnhead ${gitsvn})
    gitsvn=$(revstring ${gitsvn})
    if [ -n "${gitsvnrev}" ]; then
      local svninfo=''
      local -a revs
      svninfo+="${APVCS_fg[default]}svn${APVCS_fg[punc]}:${APVCS_fg[scm_branch]}r${gitsvnrev}"
      revs=($(git rev-list git-svn..HEAD))
      if [ $#revs -gt 0 ]; then
        svninfo+="${APVCS_fg[punc]}@${APVCS_fg[default]}HEAD~$#revs"
        svninfo+="${APVCS_fg[punc]}(${APVCS_fg[scm_commit_id]}${gitsvn}${APVCS_fg[punc]})"
      fi
      commits+=${svninfo}
    fi
  fi

  if [ $#commits -gt 0 ]; then
    echo -n " ${(j: :)commits}"
  fi
}

prompt_austin-vcs_scm_branch() {
  zgit_isgit || return

  echo -n "${APVCS_fg[punc]}:${APVCS_fg[scm_branch]}$(zgit_head)"

  if zgit_inworktree; then
    if ! zgit_isindexclean; then
      echo -n "${APVCS_fg[scm_status_staged]}+"
    fi

    local -a dirty
    if ! zgit_isworktreeclean; then
      dirty+='!'
    fi

    if zgit_hasunmerged; then
      dirty+='*'
    fi

    if zgit_hasuntracked; then
      dirty+='?'
    fi

    if [ $#dirty -gt 0 ]; then
      echo -n "${APVCS_fg[scm_status_dirty]}${(j::)dirty}"
    fi
  fi

  echo ${APVCS_fg[reset]}
}

prompt_austin-vcs_setup "$@"

#{{{1
# vcs_info configuration
#
# The vcs_info feature can be configured via zstyle.
# 
# First, the context in which we are working:
#  	
#   :vcs_info:<vcs-string>:<user-context>:<repo-root-name>
#
# <vcs-string>
#   git, git-svn, git-p4, hg, darcs, bzr, cdv, mtn, svn, cvs, svk, tla, p4
#   -init-    # no VCS backend decided yet
#   -preinit- # before vcs_info is run
#   formats   # used by vcs_info_lastmsg for looking up styles
# 
# <user-context>
#   <string>  # user-provided context
#   default   # default one used if none specified
#   command   # vcs_info_lastmsg to look up styles
#   
# <repo-root-name>
#   repo basename: /usr/src/zsh -> zsh
#             # Use for defining formats, actionformats, or branchformat
#             # styles; use '*' otherwise.
#   -all-     # Initial value, replaced with actual as soon as is known.
#
# You can of course use ':vcs_info:*' to match all VCSs in all user-contexts at once.
#
# Styles looked up:
#
#   formats   # A list of formats, used when actionformats is not used (which
#             # is most of the time).
#   actionformats
#             # A list of formats, used if a there is a special action going on
#             # in your current repository; (like an interactive rebase or a
#             # merge conflict).
#   branchformat
#             # Some backends replace %b in the formats and actionformats
#             # styles above, not only by a branch name but also by a revision
#             # number. This style lets you modify how that string should look
#             # like.
#   nvcsformats
#             # These "formats" are exported, when we didn't detect a version
#             # control system for the current directory. This is useful, if
#             # you want vcs_info to completely take over the generation of
#             # your prompt. You would do something like
#             # PS1='${vcs_info_msg_0_}' to accomplish that.
#   stgitformat
#             # The git backend replaces %m in the formats and actionformats
#             # styles with stgit-specific information for stgit-initialized
#             # branches. This style lets you modify how that string should
#             # look like.
#   max-exports
#             # Defines the maximum number if vcs_info_msg_*_ variables
#             # vcs_info will export.
#   enable    # A list of backends you want to use. Checked in the -init-
#             # context. If this list contains an item called NONE no backend
#             # is used at all and vcs_info will do nothing. If this list
#             # contains ALL vcs_info will use all backends known to it. Only
#             # with ALL in enable, the disable style has any effect. ALL and
#             # NONE are actually tested case insensitively.
#   disable   # A list of VCSs, you don't want vcs_info to test for
#             # repositories (checked in the -init- context, too). Only used if
#             # enable contains ALL.
#   disable-patterns
#             # A list of patterns that are checked against $PWD. If a pattern
#             # matches, vcs_info will be disabled. This style is checked in
#             # the :vcs_info:-init-:*:-all- context.
#             #
#             # Say, ~/.zsh is a directory under version control, in which you
#             # do not want vcs_info to be active, do:
#             #  	zstyle ':vcs_info:*' disable-patterns "$HOME/.zsh(|/*)"
#   check-for-changes
#             # If enabled, this style (currently only used by the git backend)
#             # causes the %c and %u format escapes to be filled with
#             # information. The strings filled into these escapes can be
#             # controlled via the stagedstr and unstagedstr styles.
#             #
#             # Note, that the actions taken if this style is enabled are
#             # potentially expensive (read: they take time, depending on how
#             # big the current repository is). Therefore, it is disabled by
#             # default.
#   stagedstr # This string will be used in the %c escape if there are staged
#             # changes in the repository.
#   unstagedstr
#             # This string will be used in the %u escape if there are unstaged
#             # changes in the repository.
#   command   # This style causes vcs_info to use the supplied string as the
#             # command to use as the vcs's binary. Note, that setting this in
#             # ':vcs_info:*' is not a good idea.
#             #
#             # If the value of this style is empty (which is the default), the
#             # used binary name is the name of the backend in use (e.g. svn is
#             # used in a svn repository).
#             #
#             # The repo-root-name part in the context is always the default
#             # -all- when this style is looked up.
#             #
#             # For example, this style can be used to use binaries from
#             # non-default installation directories. Assume, git is installed
#             # in /usr/bin, but your sysadmin installed a newer version in
#             # /usr/bin/local. Now, instead of changing the order of your
#             # $PATH parameter, you can do this:
#             #   zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git
#   use-server
#             # This is used by the Perforce backend (p4) to decide if it
#             # should contact the Perforce server to find out if a directory
#             # is managed by Perforce. This is the only reliable way of doing
#             # this, but runs the risk of a delay if the server name cannot be
#             # found. If the server (more specifically, the host:port pair
#             # describing the server) cannot be contacted its name is put into
#             # the associative array vcs_info_p4_dead_servers and not
#             # contacted again during the session until it is removed by hand.
#             # If you do not set this style, the p4 backend is only usable if
#             # you have set the environment variable P4CONFIG to a file name
#             # and have corresponding files in the root directories of each
#             # Perforce client. See comments in the function
#             # VCS_INFO_detect_p4 for more detail.
#   use-simple
#             # If there are two different ways of gathering information, you
#             # can select the simpler one by setting this style to true; the
#             # default is to use the not-that-simple code, which is
#             # potentially a lot slower but might be more accurate in all
#             # possible cases. This style is only used by the bzr backend.
#   get-revision
#             # If set to true, vcs_info goes the extra mile to figure out the
#             # revision of a repository's work tree (currently for the git and
#             # hg backends, where this kind of information is not always
#             # vital). For git, the hash value of the currently checked out
#             # commit is available via the %i expansion. With hg, the local
#             # revision number is available via %i and the corresponding
#             # global hash is available via %m. If this style is set in the hg
#             # context, the backend supports the branchformat style.
#   use-prompt-escapes
#             # Determines if we assume that the assembled string from vcs_info
#             # includes prompt escapes. (Used by vcs_info_lastmsg.)
# 
# The default values for these styles in all contexts are:
# 
#   formats   # " (%s)-[%b|%a]-"
#   actionformats
#             # " (%s)-[%b]-"
#   branchformat
#             # "%b:%r" (for bzr, svn and svk)
#   nvcsformats
#             # ""
#   stgitformat
#             # " %p (%c)"
#   max-exports
#             # 2
#   enable    # ALL
#   disable   # (empty list)
#   disable-patterns
#             # (empty list)
#   check-for-changes
#             # false
#   stagedstr # (string: "S")
#   unstagedstr
#             # (string: "U")
#   command   # (empty string)
#   use-server
#             # false
#   use-simple
#             # false
#   get-revision
#             # false
#   use-prompt-escapes
#             # true
# 
# In normal formats and actionformats, the following replacements are done:
# 
#   %s  # The vcs in use (git, hg, svn etc.)
#   %b  # Information about the current branch.
#   %a  # An identifier, that describes the action. Only makes sense in
#       # actionformats.
#   %i  # The current revision number or identifier.
#   %c  # The string from the stagedstr style if there are staged changes in
#       # the repository.
#   %u  # The string from the unstagedstr style if there are unstaged changes
#       # in the repository.
#   %R  # base directory of the repository.
#   %r  # repository name. If %R is /foo/bar/repoXY, %r is repoXY.
#   %S  # subdirectory within a repository. If $PWD is
#       # /foo/bar/reposXY/beer/tasty, %S is beer/tasty.
#   %m  # A "misc" replacement. It is at the discretion of the backend to
#       # decide what this replacement expands to. It is currently used by the
#       # hg and git backends. The hg backend replaces %m with the global hash
#       # value of the current revision and the git backend replaces it with
#       # the string from the stgitformat style.
#
# In branchformat these replacements are done:
#   %b  # the branch name
#   %r  # the current revision number
# 
# In stgitformat these replacements are done:
#   %p  # the name of the patch currently on top of the stack
#   %c  # the number of unapplied patches
# 
# Not all vcs backends have to support all replacements. For nvcsformats no
# replacements are performed at all. It is just a string.
#}}}1

#{{{1
#  Special characters
#      %%     A `%'.
#      %)     A `)'.

#  Login information
#      %l     The line (tty) the user is logged in on, without `/dev/' prefix.
#             If the name starts with `/dev/tty', that prefix is stripped.
#      %M     The full machine hostname.
#      %m     The hostname up to the first `.'.  An integer may follow the `%'
#             to specify how many components  of  the  hostname  are  desired.
#             With a negative integer, trailing components of the hostname are
#             shown.
#      %n     $USERNAME.
#      %y     The line (tty) the user is logged in on, without `/dev/' prefix.
#             This does not treat `/dev/tty' names specially.

#  Shell state
#      %#     A  `#'  if  the  shell is running with privileges, a `%' if not.
#             Equivalent to `%(!.#.%%)'.  The definition of `privileged',  for
#             these  purposes,  is  that either the effective user ID is zero,
#             or, if POSIX.1e capabilities are supported, that  at  least  one
#             capability  is  raised  in  either  the Effective or Inheritable
#             capability vectors.
#      %?     The return status of the last command executed just  before  the
#             prompt.
#      %_     The  status  of the parser, i.e. the shell constructs (like `if'
#             and `for') that have been started on the command line. If  given
#             an  integer  number  that  many strings will be printed; zero or
#             negative or no integer means print as many as there  are.   This
#             is most useful in prompts PS2 for continuation lines and PS4 for
#             debugging with the XTRACE option; in the  latter  case  it  will
#             also work non-interactively.
#      %d
#      %/     Present  working  directory  ($PWD).   If an integer follows the
#             `%', it specifies a number of trailing  components  of  $PWD  to
#             show;  zero  means the whole path.  A negative integer specifies
#             leading components, i.e. %-1d specifies the first component.
#      %~     As %d and %/, but if $PWD has a named directory as  its  prefix,
#             that  part  is  replaced  by  a  `~' followed by the name of the
#             directory.  If it starts with $HOME, that part is replaced by  a
#             `~'.
#      %h
#      %!     Current history event number.
#      %i     The  line number currently being executed in the script, sourced
#             file, or shell function given by %N.  This is  most  useful  for
#             debugging as part of $PS4.
#      %I     The  line  number currently being executed in the file %x.  This
#             is similar to %i, but the line number is always a line number in
#             the file where the code was defined, even if the code is a shell
#             function.
#      %j     The number of jobs.
#      %L     The current value of $SHLVL.
#      %N     The name of the script, sourced file, or shell function that zsh
#             is currently executing, whichever was started most recently.  If
#             there is none, this is equivalent to the parameter $0.  An inte-
#             ger may follow the `%' to specify a number of trailing path com-
#             ponents to show; zero means the full path.  A  negative  integer
#             specifies leading components.
#      %x     The  name of the file containing the source code currently being
#             executed.  This behaves as %N except that function and eval com-
#             mand  names  are  not  shown,  instead  the file where they were
#             defined.
#      %c
#      %.
#      %C     Trailing component of $PWD.  An integer may follow  the  `%'  to
#             get  more  than  one component.  Unless `%C' is used, tilde con-
#             traction is performed first.  These are deprecated as %c and  %C
#             are equivalent to %1~ and %1/, respectively, while explicit pos-
#             itive integers have the  same  effect  as  for  the  latter  two
#             sequences.

#  Date and time
#      %D     The date in yy-mm-dd format.
#      %T     Current time of day, in 24-hour format.
#      %t
#      %@     Current time of day, in 12-hour, am/pm format.
#      %*     Current time of day in 24-hour format, with seconds.
#      %w     The date in day-dd format.
#      %W     The date in mm/dd/yy format.
#      %D{string}
#             string  is  formatted  using  the  strftime function.  See strf-
#             time(3) for more details.  Various zsh extensions  provide  num-
#             bers  with  no  leading  zero or space if the number is a single
#             digit:
#
#             %f     a day of the month
#             %K     the hour of the day on the 24-hour clock
#             %L     the hour of the day on the 12-hour clock
#
#             The GNU extension that a `-' between the % and the format  char-
#             acter  causes  a leading zero or space to be stripped is handled
#             directly by the shell for the format characters d, f, H,  k,  l,
#             m, M, S and y; any other format characters are provided to strf-
#             time() with any leading `-', present, so the handling is  system
#             dependent.  Further GNU extensions are not supported at present.

#  Visual effects
#      %B (%b)
#             Start (stop) boldface mode.
#      %E     Clear to end of line.
#      %U (%u)
#             Start (stop) underline mode.
#      %S (%s)
#             Start (stop) standout mode.
#      %F (%f)
#             Start  (stop)  using a different foreground colour, if supported
#             by the terminal.  The colour may be specified two  ways:  either
#             as  a  numeric  argument,  as normal, or by a sequence in braces
#             following the %F, for example %F{red}.  In the latter  case  the
#             values  allowed  are  as  described  for  the  fg  zle_highlight
#             attribute; see Character Highlighting in zshzle(1).  This  means
#             that numeric colours are allowed in the second format also.
#      %K (%k)
#             Start (stop) using a different bacKground colour.  The syntax is
#             identical to that for %F and %f.
#      %{...%}
#             Include a string as  a  literal  escape  sequence.   The  string
#             within  the braces should not change the cursor position.  Brace
#             pairs can nest.
#             A positive numeric argument between the % and the {  is  treated
#             as described for %G below.
#      %G     Within  a  %{...%} sequence, include a `glitch': that is, assume
#             that a single character width will be output.   This  is  useful
#             when  outputting  characters  that otherwise cannot be correctly
#             handled by the shell, such as the  alternate  character  set  on
#             some  terminals.   The  characters  in  question can be included
#             within a %{...%} sequence together with the  appropriate  number
#             of  %G  sequences  to  indicate  the  correct width.  An integer
#             between the `%' and `G' indicates a character width  other  than
#             one.   Hence  %{seq%2G%} outputs seq and assumes it takes up the
#             width of two standard characters.
#             Multiple uses of %G accumulate in the obvious fashion; the posi-
#             tion  of  the %G is unimportant.  Negative integers are not han-
#             dled.
#
#             Note that when prompt truncation is in use it  is  advisable  to
#             divide  up  output  into  single  characters within each %{...%}
#             group so that the correct truncation point can be found.

# CONDITIONAL SUBSTRINGS IN PROMPTS
#      %v     The value of the first element of  the  psvar  array  parameter.
#             Following  the  `%'  with  an  integer gives that element of the
#             array.  Negative integers count from the end of the array.
#      %(x.true-text.false-text)
#             Specifies a ternary expression.  The character following  the  x
#             is  arbitrary;  the  same character is used to separate the text
#             for the `true' result from that for the  `false'  result.   This
#             separator  may  not appear in the true-text, except as part of a
#             %-escape sequence.  A `)' may appear in the false-text as  `%)'.
#             true-text  and  false-text  may  both contain arbitrarily-nested
#             escape sequences, including further ternary expressions.
#
#             The left parenthesis may be preceded or followed by  a  positive
#             integer  n,  which defaults to zero.  A negative integer will be
#             multiplied by -1.  The test character x may be any of  the  fol-
#             lowing:
#
#             !      True if the shell is running with privileges.
#             #      True if the effective uid of the current process is n.
#             ?      True if the exit status of the last command was n.
#             _      True if at least n shell constructs were started.
#             C
#             /      True if the current absolute path has at least n elements
#                    relative to the root directory, hence / is counted  as  0
#                    elements.
#             c
#             .
#             ~      True if the current path, with prefix replacement, has at
#                    least n elements relative to the root directory, hence  /
#                    is counted as 0 elements.
#             D      True if the month is equal to n (January = 0).
#             d      True if the day of the month is equal to n.
#             g      True if the effective gid of the current process is n.
#             j      True if the number of jobs is at least n.
#             L      True if the SHLVL parameter is at least n.
#             l      True  if  at least n characters have already been printed
#                    on the current line.
#             S      True if the SECONDS parameter is at least n.
#             T      True if the time in hours is equal to n.
#             t      True if the time in minutes is equal to n.
#             v      True if the array psvar has at least n elements.
#             V      True  if  element  n  of  the  array  psvar  is  set  and
#                    non-empty.
#             w      True if the day of the week is equal to n (Sunday = 0).
#
#      %<string<
#      %>string>
#      %[xstring]
#             Specifies  truncation  behaviour for the remainder of the prompt
#             string.   The  third,  deprecated,   form   is   equivalent   to
#             `%xstringx',  i.e.  x  may be `<' or `>'.  The numeric argument,
#             which in the third form may appear immediately  after  the  `[',
#             specifies  the  maximum  permitted length of the various strings
#             that can be displayed in the prompt.  The string  will  be  dis-
#             played  in  place  of  the truncated portion of any string; note
#             this does not undergo prompt expansion.
#
#             The forms with `<' truncate at the left of the string,  and  the
#             forms  with  `>' truncate at the right of the string.  For exam-
#             ple, if  the  current  directory  is  `/home/pike',  the  prompt
#             `%8<..<%/'  will expand to `..e/pike'.  In this string, the ter-
#             minating character (`<', `>' or `]'), or in fact any  character,
#             may be quoted by a preceding `\'; note when using print -P, how-
#             ever, that this must be doubled as the string is also subject to
#             standard  print  processing,  in  addition  to  any  backslashes
#             removed by a double quoted string:  the worst case is  therefore
#             `print -P "%<\\\\<<..."'.
#
#             If the string is longer than the specified truncation length, it
#             will appear in full, completely replacing the truncated string.
#
#             The part of the prompt string to be truncated runs to the end of
#             the  string,  or  to  the end of the next enclosing group of the
#             `%(' construct, or to the next  truncation  encountered  at  the
#             same  grouping  level  (i.e. truncations inside a `%(' are sepa-
#             rate), which ever comes first.  In particular, a truncation with
#             argument  zero  (e.g.  `%<<')  marks the end of the range of the
#             string to be truncated while turning off truncation  from  there
#             on.  For  example,  the  prompt  '%10<...<%~%<<%# ' will print a
#             truncated representation of the current directory, followed by a
#             `%'  or  `#', followed by a space.  Without the `%<<', those two
#             characters would be included in the string to be truncated.
#}}}1
