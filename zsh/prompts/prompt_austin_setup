#autoload -U
# austin prompt theme

autoload -U zgitinit && zgitinit
zgit_start_hooks

function prompt_austin_help ()
{
  cat <<'EOF'
prompt austin [options]

Options
-------
  [no]right     Show the right-hand prompt.
  [no]verbose   Include "verbose" information.
  [no]unicode   Include Unicode characters.
  [no]vcsinfo   Use zsh's vcs_info zstyle.
EOF
}

function __prompt_austin_colors()
{
  __austin_colors=(
    default           "%{${fg[default]}%}"
    date              "%{${fg[cyan]}%}"
    time              "%{${fg[blue]}%}"
    host              "%{${fg[green]}%}"
    user              "%{${fg[cyan]}%}"
    punc              "%{${fg[yellow]}%}"
    line              "%{${fg[magenta]}%}"
    hist              "%{${fg[green]}%}"
    path              "%{${fg[cyan]}%}"
    shortpath         "%{${fg[default]}%}"
    rc                "%{${fg[red]}%}"
    vcs_branch        "%{${fg[cyan]}%}"
    vcs_commitid      "%{${fg[yellow]}%}"
    vcs_status_dirty  "%{${fg[red]}%}"
    vcs_status_staged "%{${fg[green]}%}"
    \#                "%{%(!.${fg[red]}.${fg[yellow]})%}"
    reset             "%{${fg[default]}%}"
  )
}

function __prompt_austin_vcsnames()
{
  if ${__austin_options[unicode]}; then
    __austin_vcsnames=(
      bzr             "(bzr)"
      cdv             "(cdv)"
      cvs             "(cvs)"
      darcs           "(darcs)"
      git             "(±)"
      hg              "(☿)"
      git-p4          "(±p₄)"
      git-svn         "(±svn)"
      hg-git          "(☿±)"
      hg-hgsubversion "(☿svn)"
      hg-hgsvn        "(☿svn)"
      mtn             "(mtn)"
      p4              "(p₄)"
      svk             "(svk)"
      svn             "(svn)"
      tla             "(tla)"
    )
  elif ${__austin_options[vcsinfo]}; then
    __austin_vcsnames=(
      bzr             "(%s)"
      cdv             "(%s)"
      cvs             "(%s)"
      darcs           "(%s)"
      git             "(%s)"
      hg              "(%s)"
      git-p4          "(%s)"
      git-svn         "(%s)"
      hg-git          "(%s)"
      hg-hgsubversion "(%s)"
      hg-hgsvn        "(%s)"
      mtn             "(%s)"
      p4              "(%s)"
      svk             "(%s)"
      svn             "(%s)"
      tla             "(%s)"
    )
  else
    __austin_vcsnames=(
      bzr             "(bzr)"
      cdv             "(cdv)"
      cvs             "(cvs)"
      darcs           "(darcs)"
      git             "(git)"
      hg              "(hg)"
      git-p4          "(git-p4)"
      git-svn         "(git-svn)"
      hg-git          "(hg-git)"
      hg-hgsubversion "(hg-svn)"
      hg-hgsvn        "(hg-svn)"
      mtn             "(mtn)"
      p4              "(p4)"
      svk             "(svk)"
      svn             "(svn)"
      tla             "(tla)"
    )
  fi
}

function __prompt_austin_formats()
{
  __austin_formats=(
    date              "${__austin_colors[date]}%D{%Y-%m-%d}${__austin_colors[reset]}"
    time              "${__austin_colors[time]}%D{%T}${__austin_colors[reset]}"
    host              "${__austin_colors[host]}%m${__austin_colors[reset]}"
    user              "${__austin_colors[user]}%n${__austin_colors[reset]}"
    punc              ""
    line              "${__austin_colors[line]}%l${__austin_colors[reset]}"
    hist              "${__austin_colors[hist]}%h${__austin_colors[reset]} "
    path              "${__austin_colors[path]}%(2~.%~.%/)${__austin_colors[reset]}"
    shortpath         "${__austin_colors[shortpath]}%1~${__austin_colors[reset]}"
    rc                "%(?.. ${__austin_colors[rc]}(%?%)${__austin_colors[reset]})"
    vcs_branch        ""
    vcs_commitid      ""
    vcs_status_dirty  ""
    vcs_status_staged ""
    \#                "${__austin_colors[#]}%#${__austin_colors[reset]}"
  )

  if ${__austin_options[unicode]}; then
    __austin_formats[#]="${__austin_colors[#]}%(!.☢.‣)${__austin_colors[reset]}"
  fi

  if ${__austin_optons[vcsinfo]}; then
    if ${__austin_options[unicode]}; then
      zstyle ':vcs_info:*:prompt:*' unstagedstr '‽'
      zstyle ':vcs_info:*:prompt:*' stagedstr '✓'
    else
      zstyle ':vcs_info:*:prompt:*' unstagedstr '?'
      zstyle ':vcs_info:*:prompt:*' stagedstr '!'
    fi

    zstyle ':vcs_info:*:prompt:*' check-for-changes true
  fi
}

function __prompt_austin_declare()
{
  declare -Ag __austin_colors
  declare -Ag __austin_vcsnames
  declare -Ag __austin_formats
  declare -Ag __austin_options
}

function __git_revstring()
{
  git describe --tags --always ${1} 2>/dev/null ||
    git rev-parse --short ${1} 2>/dev/null
}

function prompt_austin_setup()
{
  __prompt_austin_declare
  __prompt_austin_options "${@}"
  __prompt_austin_colors
  __prompt_austin_vcsnames
  __prompt_austin_formats

  PROMPT=

  if ${__austin_options[verbose]}; then
    PROMPT+="${__austin_formats[host]} "
  fi
  PROMPT+="${__austin_formats[path]}"
  PROMPT+="\$(prompt_austin_vcs_status)"
  PROMPT+="${__austin_formats[rc]}"

  PROMPT+="
"
  PROMPT+="${__austin_formats[hist]} "
  PROMPT+="${__austin_formats[shortpath]}"
  PROMPT+="\$(prompt_austin_vcs_branch)"
  PROMPT+=" ${__austin_formats[#]} "

  RPROMPT=
  if ${__austin_options[right]}; then
    if ${__austin_options[verbose]}; then
      RPROMPT+="${__austin_formats[date]} ${__austin_formats[time]} "
    fi
    RPROMPT+="${__austin_formats[user]}"
    RPROMPT+=" ${__austin_formats[line]}"
  else
    unset RPROMPT
  fi

  export PROMPT RPROMPT
  if is-at-least 4.3.9; then
    add-zsh-hook precmd prompt_austin_precmd
    # add-zsh-hook preexec prompt_austin_preexec
  else
    # preexec_functions+=(prompt_austin_preexec)
    precmd_functions+=(prompt_austin_precmd)
  fi
}

function prompt_austin_preexec()
{
  if [[ "${TERM}" == "screen" ]]; then
    local CMD=${1[(wr)^(*=*|sudo|-*)]}
    echo -n "\ek${CMD}\e\\"
  fi
}

function prompt_austin_precmd()
{
  local ex=$?
  psvar=()

  if [[ ${ex} -ge 128 ]]; then
    sig=${signals[${ex}-127]}
    psvar[1]="sig${(L)sig}"
  else
    psvar[1]="${ex}"
  fi

  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  # Truncate the path if it's too long.
  PR_FILLBAR=""
  PR_PWDLEN=""

  local promptsize=${#${(%):---(%n@%m:%l)---()--}}
  local pwdsize=${#${(%):-%~}}

  if [[ "${promptsize} + ${pwdsize}" -gt ${TERMWIDTH} ]]; then
    ((PR_PWDLEN=${TERMWIDTH} - ${promptsize}))
  else
    PR_FILLBAR="\${(l.((${TERMWIDTH} - (${promptsize} + ${pwdsize})))..${PR_HBAR}.)}"
  fi
}

function prompt_austin_vcs_status()
{
  zgit_isgit || return

  head=$(zgit_head)
  gitcommit=$(__git_revstring ${head})

  local -a commits

  if zgit_rebaseinfo; then
    orig_commit=$(__git_revstring ${zgit_info[rb_head]})
    orig_name=$(git name-rev --name-only ${zgit_info[rb_head]})
    orig="${__austin_colors[vcs_branch]}${orig_name}${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${orig_commit}${__austin_colors[punc]})"
    onto_commit=$(__git_revstring ${zgit_info[rb_onto]})
    onto_name=$(git name-rev --name-only ${zgit_info[rb_onto]})
    onto="${__austin_colors[vcs_branch]}${onto_name}${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${onto_commit}${__austin_colors[punc]})"

    if [ -n "${zgit_info[rb_upstream]}" ] && [ ${zgit_info[rb_upstream]} != ${zgit_info[rb_onto]} ]; then
      upstream_commit=$(__git_revstring ${zgit_info[rb_upstream]})
      upstream_name=$(git name-rev --name-only ${zgit_info[rb_upstream]})
      upstream="${__austin_colors[vcs_branch]}${upstream_name}${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${upstream_commit}${__austin_colors[punc]})"
      commits+="rebasing ${upstream}${__austin_colors[reset]}..${orig}${__austin_colors[reset]} onto ${onto}${__austin_colors[reset]}"
    else
      commits+="rebasing ${onto}${__austin_colors[reset]}..${orig}${__austin_colors[reset]}"
    fi

    local -a revs
    revs=($(git rev-list ${zgit_info[rb_onto]}..HEAD))
    if [ $#revs -gt 0 ]; then
      commits+="\n$#revs commits in"
    fi

    if [ -f ${zgit_info[dotest]}/message ]; then
      mess=$(head -n1 ${zgit_info[dotest]}/message)
      commits+="on ${mess}"
    fi
  elif [ -n "${gitcommit}" ]; then
    commits+="on ${__austin_colors[vcs_branch]}${head}${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${gitcommit}${__austin_colors[punc]})${__austin_colors[reset]}"
    local track_merge=$(zgit_tracking_merge)
    if [ -n "${track_merge}" ]; then
      if git rev-parse --verify -q ${track_merge} >/dev/null; then
        local track_remote=$(zgit_tracking_remote)
        local tracked=$(__git_revstring ${track_merge} 2>/dev/null)

        local -a revs
        revs=($(git rev-list --reverse ${track_merge}..HEAD))
        if [ $#revs -gt 0 ]; then
          local base=$(__git_revstring ${revs[1]}~1)
          local base_name=$(git name-rev --name-only ${base})
          local base_short=$(__git_revstring ${base})
          local word_commits
          if [ $#revs -gt 1 ]; then
            word_commits='commits'
          else
            word_commits='commit'
          fi

          local conj="since"
          if [[ "${base}" == "${tracked}" ]]; then
            conj+=" tracked"
            tracked=
          fi
          commits+="$#revs ${word_commits} ${conj} ${__austin_colors[vcs_branch]}${base_name}${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${base_short}${__austin_colors[punc]})${__austin_colors[reset]}"
        fi

        if [ -n "${tracked}" ]; then
          local track_name=${track_merge}
          if [[ ${track_remote} == "." ]]; then
            track_name=${track_name##*/}
          fi
          tracked=$(__git_revstring ${tracked})
          commits+="tracking ${__austin_colors[vcs_branch]}${track_name}${__austin_colors[punc]}"
          if [[ "${tracked}" != "${gitcommit}" ]]; then
            commits[$#commits]+="(${__austin_colors[vcs_commitid]}${tracked}${__austin_colors[punc]})"
          fi
          commits[$#commits]+="${__austin_colors[reset]}"
        fi
      fi
    fi
  fi

  gitsvn=$(git rev-parse --verify -q --short git-svn)
  if [ $? -eq 0 ]; then
    gitsvnrev=$(zgit_svnhead ${gitsvn})
    gitsvn=$(__git_revstring ${gitsvn})
    if [ -n "${gitsvnrev}" ]; then
      local svninfo=''
      local -a revs
      svninfo+="${__austin_colors[default]}svn${__austin_colors[punc]}:${__austin_colors[vcs_branch]}r${gitsvnrev}"
      revs=($(git rev-list git-svn..HEAD))
      if [ $#revs -gt 0 ]; then
        svninfo+="${__austin_colors[punc]}@${__austin_colors[default]}HEAD~$#revs"
        svninfo+="${__austin_colors[punc]}(${__austin_colors[vcs_commitid]}${gitsvn}${__austin_colors[punc]})"
      fi
      commits+=${svninfo}
    fi
  fi

  if [ $#commits -gt 0 ]; then
    echo -n " ${(j: :)commits}"
  fi
}

function prompt_austin_vcs_branch()
{
  zgit_isgit || return

  echo -n "${__austin_colors[punc]}:${__austin_colors[vcs_branch]}$(zgit_head)"

  if zgit_inworktree; then
    if ! zgit_isindexclean; then
      echo -n "${__austin_colors[vcs_status_staged]}+"
    fi

    local -a dirty
    if ! zgit_isworktreeclean; then
      dirty+='!'
    fi

    if zgit_hasunmerged; then
      dirty+='*'
    fi

    if zgit_hasuntracked; then
      dirty+='?'
    fi

    if [ $#dirty -gt 0 ]; then
      echo -n "${__austin_colors[vcs_status_dirty]}${(j::)dirty}"
    fi
  fi

  echo ${__austin_colors[reset]}
}

function __prompt_austin_options()
{
  local -A options
  options=(
    right   false
    verbose true
    unicode true
    vcsinfo true
  )

  if [[ ${TERM} == screen* ]] && [ -n "${STY}" ]; then
    options[verbose]=true
  fi

  if ! is-at-least 4.3.6; then
    options[vcsinfo]=false
  fi

  for arg in "${@}"; do
    case ${arg} in
      no*)  options[${arg/no/}]=false ;;
      no_*) options[${arg/no_/}]=false ;;
      *)    options[${arg}]=true ;;
    esac
  done

  __austin_options=(${(kv)options})
}

prompt_austin_setup "$@"
