#autoload -U

local bn=$(basename ${0})

function __hzsh_gitid-error()
{
  echo "${bn}: error: ${*}" >&2
}

function __hzsh_gitid-usage()
{
  cat >&2 <<EOS

Usage: ${bn} add|set IDENTITY-NAME "NAME" "email"
       ${bn} remove IDENTITY-NAME
       ${bn} [use] IDENTITY-NAME
       ${bn} clear
       ${bn} show IDENTITY-NAME
       ${bn} list

Manages or uses git user identities.

  add     Sets the values for a git identity.
  remove  Removes a git identity from the system.
  use     Uses a particular git identity.
  clear   Removes git identity overrides, keeping what is
          in .gitconfig.
  show    Shows the settings for the named identity.
  list    Shows the names of all identities.

EOS
}

function __hzsh_gitid-exists()
{
  if [ ! -f "${__hzsh_git_plugin_identity_path}/${1}" ]; then
    __hzsh_gitid-error "gitid \"${1}\" does not exist."
    return 127
  fi

  return 0
}

function __hzsh_gitid-remove()
{
  __hzsh_gitid-exists ${1} || return

  echo "Removing gitid \"${1}\"."
  rm -f "${__hzsh_git_plugin_identity_path}/${1}"
}

function __hzsh_gitid-use()
{
  __hzsh_gitid-exists ${1} || return

  echo "Using gitid \"${1}\"."
  source "${__hzsh_git_plugin_identity_path}/${1}"
}

function __hzsh_gitid-clear()
{
  unset GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITER_NAME GIT_COMMITER_EMAIL
}

function __hzsh_gitid-show()
{
  __hzsh_gitid-exists ${1} || return

  echo "gitid \"${1}\":"
  cat "${__hzsh_git_plugin_identity_path}/${1}"
}

function __hzsh_gitid-add()
{
  cat > "${__hzsh_git_plugin_identity_path}/${1}" <<EOS
export GIT_AUTHOR_NAME="${2}"
export GIT_AUTHOR_EMAIL="${3}"

export GIT_COMMITTER_NAME="${2}"
export GIT_COMMITTER_EMAIL="${3}"
EOS
}

function __hzsh_gitid-list()
{
  if [ ${#identities} -eq 0 ]; then
    echo "No identities defined."
  else
    local name
    local -a printable
    for name (${identities}); do
      printable+=(${name:t})
    done

    echo ${printable}
  fi
}

if [ -z "${__hzsh_git_plugin_identity_path}" ]; then
  __hzsh_gitid-error "Missing the identity path."
  __hzsh_gitid-usage
  return 1
fi

if [ ${#} -eq 0 ]; then
  __hzsh_gitid-error "No command given."
  __hzsh_gitid-usage
  return 1
fi

[ -d "${__hzsh_git_plugin_identity_path}" ] ||
  mkdir -p "${__hzsh_git_plugin_identity_path}"

local command_name="${1}"
shift 1

local -a identities
identities=("${__hzsh_git_plugin_identity_path}"/*(.N))

local command_match=$(echo "${command_name}" | tr A-Z a-z)
local -i required_params=0

case "${command_match}" in
  add|set)
    # gitid add|set IDENTITY-NAME "NAME" "email"
    required_params=3
    command_match=add
    ;;
  remove|show|use)
    # gitid remove|show|use IDENTITY-NAME
    required_params=1
    ;;
  list)
    # gitid list
    required_params=0
    ;;
  *)
    if __hzsh_gitid-exists ${command_name}; then
      __hzsh_gitid-use ${command_name}
      return 0
    fi

    __hzsh_gitid-error "Unknown command \"${command_name}\"."
    __hzsh_gitid-usage
    return 2
    ;;
esac

if [ "${#}" -ne ${required_params} ]; then
  __hzsh_gitid-error "Invalid parameter count for \"${command_name}\"."
  __hzsh_gitid-usage
  return 3
fi

__hzsh_gitid-${command_match} "${@}"
