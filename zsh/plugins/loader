#! /bin/zsh

typeset __hszsh_plugins_path
__hszsh_plugins_path=$(echo ${1:-$(echo ${0:h})}(:A))
__hszsh_plugins_path=$(echo ${__hszsh_plugins_path%/})

typeset -A __hszsh_current_plugin

# The names of the zsh plugins we will be supporting.
typeset -ga __hszsh_plugins

for __hszsh_current_plugin_name (${__hszsh_plugins_path}/**/detect(.)); do
  # roughly basename(dirname($__hszsh_current_plugin_name))
  __hszsh_current_plugin[name]=${__hszsh_current_plugin_name:h:t}
  __hszsh_current_plugin[found]=false

  while builtin read -A __hszsh_current_plugin_line; do
    __hszsh_current_plugin[directive]=${__hszsh_current_plugin_line[1]}
    shift __hszsh_current_plugin_line

    __hszsh_current_plugin[rc]=0

    # Deal with the fact that the "command" __hszsh_current_plugin[directive] is optional. While we're
    # at it, also make it so that any of the directives by themselves can be
    # treated as "command <__hszsh_current_plugin[directive]>", just in case.
    case ${__hszsh_current_plugin[directive]} in
      do-return)
        if [[ ${#__hszsh_current_plugin_line} = 0 ]]; then
          __hszsh_current_plugin_line[1]=(${__hszsh_current_plugin[directive]} ${line[1]})
          __hszsh_current_plugin[directive]="command"
        elif [[ ${#__hszsh_current_plugin_line} -ge 2 ]]; then
          __hszsh_current_plugin[rc]=${__hszsh_current_plugin_line[1]}
          shift __hszsh_current_plugin_line
        fi
        ;;
      alternates|"do"|directory|file|executable)
        if [[ ${#__hszsh_current_plugin_line} = 0 ]]; then
          __hszsh_current_plugin_line[1]=(${__hszsh_current_plugin[directive]} ${line[1]})
          __hszsh_current_plugin[directive]="command"
        fi
        ;;
      command)
        :
        ;;
      *)
        __hszsh_current_plugin_line[1]=(${__hszsh_current_plugin[directive]} ${line[1]})
        __hszsh_current_plugin[directive]="command"
        ;;
    esac

    __hszsh_current_plugin[cmd]=${__hszsh_current_plugin_line[1]}
    shift __hszsh_current_plugin_line

    case ${__hszsh_current_plugin[directive]} in
      do-return|do)
        __hszsh_current_plugin[cmd]=$(eval "echo ${__hszsh_current_plugin[cmd]}")
        ${__hszsh_current_plugin[cmd]} ${__hszsh_current_plugin_line[*]} > /dev/null 2> /dev/null
        __hszsh_current_plugin[res]=${?}
        if [[ ${__hszsh_current_plugin[rc]} = ${__hszsh_current_plugin[res]} ]]; then
          __hszsh_current_plugin[found]=true
        else
          __hszsh_current_plugin[found]=false
        fi
        ;;
      directory|file|executable)
        __hszsh_current_plugin[itemfound]=false
        __hszsh_plugins_spath=($(eval "echo ${__hszsh_current_plugin[cmd]} ${__hszsh_current_plugin_line[@]}"))

        for item (${__hszsh_plugins_spath[@]}); do
          case ${__hszsh_current_plugin[directive]} in
            directory)
              if [ -d "${item}" ]; then
                __hszsh_current_plugin[itemfound]=true
                break
              fi
              ;;
            file)
              if [ -f "${item}" ]; then
                __hszsh_current_plugin[itemfound]=true
                break
              fi
              ;;
            executable)
              if [ -x "${item}" ]; then
                __hszsh_current_plugin[itemfound]=true
                break
              fi
              ;;
          esac
        done

        __hszsh_current_plugin[found]=${__hszsh_current_plugin[itemfound]}
        ;;
      alternates)
        altfound=false
        for alternate (${__hszsh_current_plugin[cmd]} ${__hszsh_current_plugin_line[*]}); do
          alt=$(command -v ${alternate})
          if [ -n "${alt}" ]; then
            altfound=true
            break
          fi
        done

        __hszsh_current_plugin[found]=$altfound
        ;;
      command)
        __hszsh_current_plugin[res]=$(command -v ${__hszsh_current_plugin[cmd]})

        if [ -n "${__hszsh_current_plugin[res]}" ]; then
          __hszsh_current_plugin[found]=true
        else
          __hszsh_current_plugin[found]=false
        fi
        ;;
    esac

    if not $__hszsh_current_plugin[found]; then
      break
    fi
  done < ${__hszsh_current_plugin_name}

  if ${__hszsh_current_plugin[found]}; then
    __hszsh_plugins+=(${__hszsh_current_plugin[name]})
  fi
done

for __hszsh_current_plugin_name (${__hszsh_plugins}); do
  __hszsh_current_plugin[path]=${__hszsh_plugins_path}/${__hszsh_current_plugin_name}

  if [ -d ${__hszsh_current_plugin[path]}/init ]; then
    declare -a __hszsh_current_plugin_inits
    __hszsh_current_plugin_inits=(${__hszsh_current_plugin[path]}/init/*[^~](.N))
    if [ -n "${__hszsh_current_plugin_inits}" ]; then
      for __hszsh_current_plugin_init (${__hszsh_current_plugin_inits}); do
        case ${__hszsh_current_plugin_init} in
          *DISABLED)
            ;;
          *)
            source ${__hszsh_current_plugin_init}
            ;;
        esac
      done
    fi
  elif [ -r ${__hszsh_current_plugin[path]}/init ]; then
    source ${__hszsh_current_plugin[path]}/init
  fi

  if [ -d ${__hszsh_current_plugin[path]}/functions ]; then
    fpath=(${__hszsh_current_plugin[path]}/functions ${fpath})
  elif [ -f ${__hszsh_current_plugin[path]}/functions ]; then
    source ${__hszsh_current_plugin[path]}/functions
  fi

  add-paths-before-if ${__hszsh_current_plugin[path]}/bin
done

unset __hszsh_plugins_path \
  __hszsh_current_plugin_line \
  __hszsh_current_plugin \
  __hszsh_plugins_spath \
  __hszsh_current_plugin_inits \
  __hszsh_current_plugin_init \
  __hszsh_current_plugin_name

autoload -U $^fpath/*(N.:t)
